h1. CC Rails Portal Activity Authoring, Deployment, and Reporting System

h2. Setup

h3. Prerequisites

Working git, ruby or jruby, and rubgems, wget
Gems: capistrano, capistrano-ext, ruby-debug (oddly, haml too, when deploying ...)
TODO: understand why running capistrano requires haml...

h3. Install

The latest setup scripts have been tested with 1.4.0RC1 of JRuby, you will need a running mysql
server and a mysql username/password with enough permissions to create and drop the 
database you intend to use with RITES.

h4. RVM, Bundler, & Gem Dependencies

* "Maintaining gem dependencies":doc/gem-dependencies.textile

h4. Updating to a newer codebase.

* Example of "updating an older instance to to newer code":doc/updating_an_older_instance.md

h4. Core Extensions

* "Extensions to core classes applied at application startup":doc/core-extensions.textile

h4. Setting up a Hudson CI project

* "Setting up a Hudson CI project":doc/hudson-ci.textile

h4. GIT

In the example below we use the xproject theme and also as the name of the directory and 
the prefix of the names for the databases that will be created in mysql.

If you are a committer in this repo:

bc. git clone git@github.com:concord-consortium/rigse.git xproject

If you are not a committer:

bc. git clone git://github.com/concord-consortium/rigse.git xproject

Change to the project directory:

bc. cd xproject

Setup rvm to use Ruby 1.9.2-p290 and a gemset named xproject
(p290 is used to get libyaml installed by rvm)

bc. rvm use 1.9.2-p290
rvm gemset create xproject

Make an @.rvmrc@ file so rvm will use this ruby gemset combo automatically when you change to this directory:

bc. echo "rvm use 1.9.2-p290@xproject" > .rvmrc

Test out the @.rvmrc@ file and start using the gemset

bc. cd ..;cd xproject

Install "bundler":http://gembundler.com/

bc. gem install bundler

Install the precise versions of the required gems and put the executables in bin/

bc. bundle install --binstubs

Automatic setup of application settings in the config directory, for example: settings.yml and database.yml

bc. ruby config/setup.rb --name "Cross Project Portal" --database xproject --user <dbuser> --password <password> --theme xproject --states none --yes --quiet --force
  
The option @--states none@ means that only a single virtual district and school will be created.

If you leave this option out the default is to create portals instances for all the districts and schools in Massachusetts.

You can also supply a comma-delimited list of two character abbreviations for states or provinces:

bc. --states RI,CT

The options @-y -q -f@ to setup mean: 

* @-y@ automatically answer 'yes' to accept default values
* @-q@  use 'quieter' console output
* @-f@ force an update of the existing settings.yml and database.yml if they exist

Setup database.

If this fails it is probably due to a bad mysql gem install, check out the "RVM page on database integration":https://rvm.beginrescueend.com/integration/databases/ for help. You might get a warning if the databases already exist.

bc. RAILS_ENV=production bin/rake db:create:all
bc. RAILS_ENV=production bin/rake db:migrate:reset

Setup application resources

bc. RAILS_ENV=production bin/rake app:setup:new_app

Save a copy of the development database to make subsequent clean starts much quicker (bypassing rake app:setup:new_app)
* Saves database to: db/development_data.sql
* can be reloaded later with: rake db:load
* note: in default setup created by config.rb above the development and production database is the same

bc. bin/rake db:dump

This project uses an asset manager for JS & CSS files. Run the asset packager if any of the following are true:
* Files included within config/asset_packages.yml have been modified.
* Files within config/asset_packages.yml have been removed or new files have been added.
* JS and/or CSS does not seem to be updated in production mode but is updated and working in development mode.

This task should run automatically when using 'cap deploy'.
You may also run the asset packager task manually.

bc. bin/rake asset:packager:build_all

This will build all the assets within the project.

Start server and open http://localhost:3000

bc. rails s -eproduction

You can read this documentation at: http://localhost:3000/readme

After getting the server running it's good to confirm that all the tests pass before changing any code.

Prepare a database for use when running the tests:

bc. rake db:test:prepare

Run the rspec unit tests:

bc. rake spec

Run the cucumber integration tests:

bc. rake cucumber

All these tests should pass. If you add features make sure and add tests for these new features.

h3. Roll your own theme:

For now the best thing to do is to copy an existing set of themes. eg:

<pre><code>
  cp ./config/themes/<old_theme_name>/settings.sample.yml ./config/themes/<new_theme_name>
  cp -r ./themes/<old_theme_name> ./themes/<new_theme_name>
  cp -r ./public/stylesheets/themes/<old_theme_name> ./public/stylesheets/themes/<new_theme_name>
  cp -r ./public/stylesheets/sass/themes/<old_theme_name> ./public/stylesheets/sass/themes/<new_theme_name>
  # edit the assets file to package your style sheets. copy an example.
  vim ./config/asset_packages.yml
  # then pass arguments to setup.
  ruby ./config/setup.rb -t <new_theme_name>
</code></pre>

h3. when deploying to a new server

# create required directories on your server eg:
## /web/production/APP_NAME/shared/log 
## /web/production/APP_NAME/shared/config
## /web/production/APP_NAME/shared/initializers
## /web/production/APP_NAME/releases
# put configuration files in /web/production/APP_NAME/shared/config
## at a minimum you need database.yml and initializers/site_key.rb
# modify the deploy recipies (in your local config/deploy.rb and config/deploy)
# deploy cap deploy ( it will fail, but it will get far enough to make some of the other things below possible)
# run ruby config/setup.rb on the server
# comment out the one line in config/initializers/rites.rb
# make sure config/nces_data isn't there
# run RAILS_ENV=production rake rigse:setup:new_rites_app


_there's a bunch more that needs to go here_

h2. Copying the production database to a development environment

If you have ssh access to a portal instance running on a server you can get a copy of the database on
your local development instance with the following steps:

In the code below _stage_ means a capistrano stage that identifies a remote server. For example *xproject-dev*.
<pre><code>
    cap <stage> db:fetch_remote_db
    RAILS_ENV=production jruby -S rake db:load
</code></pre>

If the codebase on your development system has moved forward you may need to run additional tasks such as:
<pre><code>
  RAILS_ENV=production jruby -S rake db:migrate
  RAILS_ENV=production jruby -S rake rigse:setup:default_portal_resources
  RAILS_ENV=production jruby -S rake portal:setup:create_districts_and_schools_from_nces_data
</code></pre>

The task: default_users_roles_and_portal_resources is last on that list because code changes may have added additional and necessary default model initialization.

In order for the same passwords to work you will also need to have the same keys in your local config/initializers/site_keys.rb as on the server you copied the production data from.
<pre><code>  cap <stage> db:fetch_remote_site_keys</code></pre>

Recreating a new portal instance from scratch from an existing application.
<pre><code>
    rake db:drop:all
    git clean -fXd
    jruby config/setup.rb
    jruby -S rake gems:install
    RAILS_ENV=production jruby -S rake rigse:setup:new_rites_app
</code></pre>

The '-fxd' parameters to to git clean:

# d: Remove untracked directories in addition to untracked files.
# X: Remove only files ignored by git.
# f: force removal

h3. Setting up a local JNLP Web Start servlet

You can also setup a local jnlp web start server for a development environment with less dependence on outside services.

* "Setup a Full SAIL Stack on Mac OS 10.5":https://confluence.concord.org/display/CSP/Setup+a+Full+SAIL+Stack+on+MacOS+10.5* has several sections with useful information:

# "Install Jnlp Servlet and build associated WAR file with jnlp and jars":https://confluence.concord.org/display/CSP/Setup+a+Full+SAIL+Stack+on+MacOS+10.5#SetupaFullSAILStackonMacOS10.5-4InstallJnlpServletandbuildassociatedWARfilewithjnlpandjars

h2. NCES District and School Tables

When a rails-portal instance is created two tables containing data for schools and districts in the US are created from data supplied by the "National Center for Education Statistics (NCES)":http://nces.ed.gov/.

NCES maintains a database about US districts and schools called the "Common Core of Data":http://nces.ed.gov/ccd

The rake task: <code>portal:setup:create_districts_and_schools_from_nces_data</code> downloads 2006 NCES CCD data files from NCES website and imports data from these data files into the following models:

* <code>Portal::Nces06District</code>
* <code>Portal::Nces06School</code>

Only data from states and provinces identified in the <code>config/settings.yml</code> for the portal instance are imported.

The NCES district and school models are used to provide data from which districts and schools actively using the portal are be created.

The <code>Portal::Nces06District</code> includes about 50 different fields of data for each district.

The <code>Portal::Nces06School</code> includes about 500 different fields of data for each school.

h3. PDF documentation for the NCES data schemas

* "NCES Common Core of Data Public Elementary/Secondary School Universe Survey: School Year 2006–07, Version 1b":http://nces.ed.gov/ccd/pdf/psu061bgen.pdf
* "NCES Common Core of Data Local Education Agency Universe Survey: School Year 2006–07":http://nces.ed.gov/ccd/pdf/pau061bgen.pdf

h2. Testing

h3. Testing Frameworks

h4. Rspec, Rspec-rails

* "rspec and rspec-rails":http://rspec.info/
** "rspec repo":http://github.com/dchelimsky/rspec
** "rspec-rails repo":http://github.com/dchelimsky/rspec-rails

h4. Cucumber


h4. Capybara

You can customize your selenium drivers by editing @ ~/.capybara.rb @
This file is sourced by @ ./features/support/local_config.rb @

Here is a sample file which checks for an ENV param named @ SELENIUM_CONFIG @

<code><pre>
    case ENV['SELENIUM_CONFIG']
    when 'saucelabs-ie'
        Capybara.server_port = ENV['RAILS_PORT'].to_i
        Capybara.app_host = "http://app#{Capybara.server_port}.test.dev.concord.org"
        selenium_remote :url => "http://ccdev:aebecf9c-b426-44f8-9726-6eb747a7340e@ondemand.saucelabs.com:80/wd/hub",
          :desired_capabilities => Selenium::WebDriver::Remote::Capabilities.internet_explorer(:platform => "WINDOWS")
    when 'ff6'
      puts "----- using Firefox 6 profile ---- "
      Selenium::WebDriver::Firefox.path= '/usr/local/bin/firefox6'
      Capybara.register_driver :selenium do |app|
        Capybara::Selenium::Driver.new(app, :profile => 'ff6')
      end
    when 'chrome'
      puts "---- using Chrome profile ----"
      Capybara.register_driver :selenium do |app|
        Capybara::Selenium::Driver.new(app, :browser => :chrome)
      end
    else 
        # by default don't customize anything, this ought to keep the current capybara tests running as before
      #
    end
</pre></code>
h4. Factory Girl

bq. factory_girl allows you to quickly define prototypes for each of your models and ask for instances with properties that are important to the test at hand.

* "Factory Girl":http://thoughtbot.com/projects/factory_girl
** "Factory Girl repo":http://github.com/thoughtbot/factory_girl
** "Factory Girl introduction":http://robots.thoughtbot.com/post/159807023/waiting-for-a-factory-girl
** "Factory Girl rdoc":http://rdoc.info/projects/thoughtbot/factory_girl

h3. Using Nokogiri with JRuby on Mac OS X

Some of the testing frameworks depend on Nokogiri which is a Ruby html and xml parsing gem that uses the C-based libxml2 library.

When Nokogiri runs in JRuby it uses "Ruby FFI":http://kenai.com/projects/ruby-ffi to dynamically load the libxml2 shared library.

The version of libxml2 (2.6.16) included with MacOS X is old and the FFI version of Nokogiri prints this warning when it is run with this version of libxml installed:

bq. You're using libxml2 version 2.6.16 which is over 4 years old and has plenty of bugs. We suggest that for maximum HTML/XML parsing pleasure, you upgrade your version of libxml2 and re-install nokogiri. 
If you like using libxml2 version 2.6.16, but don't like this warning, please define the constant I_KNOW_I_AM_USING_AN_OLD_AND_BUGGY_VERSION_OF_LIBXML2 before requring nokogiri.

If you have  a newer version of the libxml2 library installed with macports you can set this environmental variable:
<pre><code>  LD_LIBRARY_PATH=/opt/local/lib</code></pre> to have nokogiri check there for shared libraries first.

See: "libxml2 for Nokogiri in JRuby":http://www.practicalguile.com/2009/06/07/libxml2-for-nokogiri-in-jruby/

bq. Nokogiri uses Ruby FFI to dynamically load native C code and FFI makes use of dlopen to do the actual loading of dynamic libraries. On OSX, dlopen searches for files specified by a couple of environment variables (LD_LIBRARY_PATH, DYLD_LIBRARY_PATH, DYLD_FALLBACK_LIBRARY_PATH), and the current working directory. Setting LD_LIBRARY_PATH to /opt/local/lib worked for me. There may be differences in the environment variables used for dlopen on different platforms, so a look at the MAN pages would be a good idea if things don't seem to work.

h3. Running the rspec tests

*JRuby invocation note*: use this command prefix to run the rake spec tests from JRuby if you have a more recent version of libxml2 installed with macports:

bq. <code>LD_LIBRARY_PATH=/opt/local/lib jruby -S rake spec </code> _options_

*Running all the rspec tests:*
<pre><code>  rake spec</code></pre>

*Running a single file:*
<pre><code>  rake spec SPEC=spec/routing/dataservice/bundle_contents_routing_spec.rb</code></pre>  

*Running a single directory:*
<pre><code>  rake spec SPEC=spec/routing/dataservice</code></pre>  

*Running all the controller tests:*
<pre><code>  rake spec SPEC=spec/controllers</code></pre> 

h3. Running the feature tests with cucumber

*JRuby invocation note*: use this command prefix to run the rake spec tests from JRuby if you have a more recent version of libxml2 installed with macports:
<pre><code>  LD_LIBRARY_PATH=/opt/local/lib jruby -S</code></pre>

*Running all the feature tests:*
<pre><code>  rake cucumber</code></pre>  

*Running all the feature tests using the ci_reporter gem that's used on the hudson CI system:*
<pre><code>  rake hudson:cucumber</code></pre>  

*Running a single feature:*
<pre><code>  rake cucumber FEATURE=features/student_can_not_see_deactivated_offerings.feature</code></pre>  

h2. Understanding the Codebase


h3. Themes

We are using theme_support plugin -- except it doesn't play very well with compass and asset_packager.  So, we handle sass/stylesheets free-hand.
Here is a short description of how to setup a new theme:

# Copy an existing theme from RAILS_ROOT/themes/
# modify settings.yml to and add a theme: theme_name entry
# Put sass files in public/stylesheets/sass/themes/<theme-name>/*.sass
# These sass files will be compiled and moved into public/stylesheets/themes/<theme-name>/*.css
# Configure your themes assets in asset_packages.yml under the stylesheets section with the format:

<pre><code> 
  - <themename>:
    - themes/<themename>/style_name
      - (others)
</code></pre>  

  eg:

<pre><code> 
  - itsisu
    - themes/itsisu/itsisu
    - accordion
</code></pre>  


h3. Some video walk-throughs

* "The Page Elements Model Part I":http://screencast.com/t/8M2ISjcM
* "Page Elements Model Part II":http://screencast.com/t/YyqOHfItL
* "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN
* "PageElement View partials":http://screencast.com/t/800TVxOC
* "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN
* "Javascript use in Portal":http://screencast.com/t/z7Vkt32iTp

---

h3. The Page Elements Model Part I: 

screencast: "The Page Elements Model Part I":http://screencast.com/t/8M2ISjcM

Install github version of railroad with aasm patches from "ddolar's repo":http://github.com/ddollar/railroad/tree/master

Generate a graph of the projects models using railroad:
<pre><code>
  railroad -o models.dot -M
</code></pre>

Open that file (models.dot) with omnigraffle, or traslate to some other image format using the dot tool.

---

h3. Page Elements Model Part II:

screencast: "Page Elements Model Part II":http://screencast.com/t/YyqOHfItL

Using mysql query browser (part of the osx mysql binary distrobution) to view schema:
"Mysql gui-tools":http://dev.mysql.com/get/Downloads/MySQLGUITools/mysql-gui-tools-5.0-r12-osx10.4-universal.dmg/from/pick

Use the generator to generate page elements eg:
<pre><code>
  ./script/generate element xhtml content:text
</code></pre>

---

h3. PageElement View partials:

screencast: "PageElement View partials":http://screencast.com/t/800TVxOC

Shows the relationship between:
* pages/show.html.haml
* pages/element_container.html.haml 
* shared/_embeddable_container.html.haml
* <embeddable_type>/_show.html.haml

---

h3. HAML, Compass and SASS:

screencast: "HAML, Compass and SASS":http://screencast.com/t/68yJOeCRcN

Brief introduction to the technologies generally, and how we use them specifically

* "HAML & SASS":http://haml.hamptoncatlin.com/
* "Compass: http":http//compass-style.org/
* "BluePrint: http":http//www.blueprintcss.org/

---

h3. Javascript use in Portal

screencast: "Javascript use in Portal":http://screencast.com/t/z7Vkt32iTp

Javascript librararies we are using, and what things we have written by ourselves;
Stuff we did:
* accordion view
* drop-downs
Other libraries
* "prototype":http://www.prototypejs.org/
* "scriptaculous":http://script.aculo.us/
* "tinymce":http://tinymce.moxiecode.com/
* "flotr":http://solutoire.com/flotr/

h2. Capistrano Recipies (and problems)

+warning+: sometimes the permissions on the shared/cache/.git directory get changed to be read-only for the group. So what i do to fix this is:
<pre><code>
  sudo chmod -R g+w ./cached-copy/
</code></pre>

More info on capistrano-ext/multistage deployments can be found here: http://weblog.jamisbuck.org/2007/7/23/capistrano-multistage

h3. Database recipes

There are a few database oriented recipes which should cover the basic db-oriented tasks you might want to do. 
Here are some scenarios and how to do them. Remember, all commands are entered on your local machine, in the application root directory.

There are 4 basic commands:
* <code>rake db:dump</code>
** This dumps the current environment's database to db/... eg db/production_data.sql or db/development_data.sql
* <code>rake db:load</code>
** This overwrites your current db with a sql dump from db/ into the current environment's db, provided a dump exists for your current environment
* <code>cap (production|staging|development) db:fetch_remote_db</code>
** The same as db:dump, except it dumps the database from whichever remote instance you chose
* <code>cap (staging|development) db:push_remote_db</code>
** Same as db:load, except the remote database is overwritten

*Download the production database to use locally*
<pre><code>
  cap production db:fetch_remote_db
  cp db/production_data.sql db/development_data.sql
  rake db:load
</code></pre>

*Reset the Staging or Development database with Production's version*
* <code>cap production db:fetch_remote_db</code>
* <code>cap staging db:push_remote_db</code>   or   <code>cap development db:push_remote_db</code>

*Update Staging or Development with a copy of your local database*
* <code>rake db:dump</code>
* <code>cap staging db:push_remote_db</code>   or   <code>cap development db:push_remote_db</code>

*Note*: For safety, you can't push a database to production. If you accidentally try, you'll get a message saying you can't do that.

h3. Deployment recipes

There are three custom deployment-oriented cap tasks defined in config/deploy.rb  One works, One sometimes works, and the first one *doesn't!*
* cap deploy:from_scratch does not work. 
** It would need to be able to let users answer questions.
** Instead of dropping the database, we would have to simply drop tables. (rails user does not have perms to drop dbs)
* cap deploy:install_gems does seem to work, unless there are dependancies on the gem being installed.
* cap deploy:shared_symlinks does work, and it links in the shared resources that we use. (like config/database.yml)

Workarounds for cap deploy:from_scratch:  I usually just end up logging in to otto, dropping all the tables, 
and then running the various rake tasks by hand:
<pre><code>
  rake db:migrate
  rake rigse:setup:default_users_roles
  rake rigse:setup:create_additional_users
  rake rigse:setup:import_gses_from_file
</code></pre>

We should solve this one sooner rather than later.

h3. Miscellaneous recipes

*Set the gse_key field for existing GradeSpanExpectations*
* <code>cap convert:set_gse_keys</code>

h2. Updating a staging server.

Once a development branch has been deployed to a development server, tested
and found reliable enough to deploy to staging here's how to do it.

Our convention is to create dev, staging, and production branches in the git repository following that use the same name.

For example the _xproject_ family have the following capistrano stages and branches in teh git repository:

* _xproject_dev__
* _xproject_staging__
* _xproject_production__

In the code below _<stage>_ I will assume that we are using the _xproject_ series of stages and branches.

If you don't already have a local branch of staging
<pre><code>
  git branch --track xproject_staging origin/xproject_staging
</code></pre>


Switch to the staging branch and merge from xproject_dev
<pre><code>    
  git co xproject_staging
  git merge xproject_dev
</code></pre>

Push your copy of the staging branch to the gihub repository:
<pre><code>  git push origin xproject_staging</code></pre>

Dump the production database to this file <code>db/production_data.sql</code> on the production server, 
download it to the local folder <code>db/production_data.sql</code>, the cleans up the production db/ folder.
<pre><code>  cap xproject_production db:fetch_remote_db</code></pre>

Push the production database from the local <code>db/production_data.sql</code> to the staging server, then import
the data into the database on staging, then cleanup.
<pre><code>  cap xproject_staging db:push_remote_db</code></pre>

Run any migrations on the staging server:
<pre><code>  cap xproject_staging deploy:migrate</code></pre>

There may be rake tasks that need to be run to update or fix data in the database.

These should have corresponding capistrano tasks.

Here's an older example:

If the ITSI importers have been updated and you want to run them again:
<pre><code>    
  cap xproject_staging import:erase_and_import_itsi_activities
  cap xproject_staging import:erase_and_import_ccp_itsi_units
</code></pre>

Test the staging server: "http://xproject.staging.concord.org/":http://xproject.staging.concord.org/

If the authors confirm that there are no blockers then let people know when the
update will take place and perform these tasks on the production server.

h2. other Rake tasks:

# <code>rigse:make:investigations</code> 
This task simply finds all activities with no parent investigation, and creates a new investigation for that activity. The created investigation has the same name and description as the activity it contains.

h1. haml

We use haml for some templates, see: http://haml.hamptoncatlin.com/

To install this plugin we followed this procedure:
# <code>gem install --no-ri haml</code> 
# <code>haml --rails path/to/rigse_app</code>

h3. Creating the sakai integration demo user accounts.

*OCT 7 2009 This documentation should go away* as soon as we no longer need to import sakai users by hand.
<pre><code>
  RAILS_ENV=production script/console
  require 'lib/sakaidemo'
</code></pre>

h3. Importing Sakai usrers from RINET / RIEPS.


<pre><code>
  RAILS_ENV=production script/runner "(RinetData.new).run_scheduled_job"
</code></pre>



h2. Rendering

h3. haml

We use haml for some templates, see: http://haml.hamptoncatlin.com/

to install this plugin we followed this procedure:
# <code>gem install --no-ri haml</code> 
# <code>haml --rails path/to/rigse_app</code>

h3. Rendering OTML

The sass template rites.otml.sass generates the css file: rites.otml.css which is used for styling the xhtml content in
OTCompoundDoc elements.

The Java OTrunk system uses Java html editor kit for rendering xhtml and implements a very limited version of CSS that is somewhere
between CSS1 and CSS2. You can find out more about this implementations limitations here: "Java 1.5: Class CSS":http://java.sun.com/j2se/1.5.0/docs/api/javax/swing/text/html/CSS.html



h2. Installers

Building installers requires that you are running on a mac with a local installation of "Bit Rock":http://bitrock.com/
The rake tasks assume that bitrock is in the standard /Applications/ folder.  You can override this by setting an 
environment variable in your shell which points to the correct path, eg: export BITROCK_INSTALLER=/path/to/bitrock.app

h3. config/installer.yml

Every host should have its own config/installer.yml file.  There is a config/installer.sample.yml file which can help get you started.
The shortname field should be specific to that host. Because of limitations in bitrock, the shortname can not use spaces,dashes,underscore, &etc.
The jnlp_url should point to a jnlp url on the target host.  When you run the <code>rake build:installer:build_all</code> or 
<code>cap installer:create</code> tasks, the jnlp_url must be available.


h3. Installer Rake Tasks:

Most of the installer building happens via rake tasks defined in lib/tasks/make_installers.rake. a complete list of tasks can
be gotten using: <code>rake -T installer </code>

Here are the two useful tasks:
<code><pre>
rake build:installer:build_all     # build all installers
rake build:installer:new_release   # create a new release specification interactively
</pre></code>
Assuming that your installer.yml file is correct, running rake build:installer:build_all will take care of the rest.
Build_all will automatically clean up, recache jars, and bump version numbers.

h3. Installer Capistrano Recipes

There are two cap recipes in config/deploy.rb which take care of creating installers using remote hosts installer.yml files.
* <code>cap installer:copy_config</code> copies the local installer.yml to the remote server. This would be useful if you ran new_release locally, and then
wanted to copy those config settings to the remote server.
* <code>cap installer:create</code> creates the installers and updates the remote installer.yml file, and deploys the installer images.


h3. Sample session for building installers:

h4. boot strapping an unconfigured server:

In this session we are assuming that we are working with a host which does not have a local installer.yml file.
First we create a new local release.  The first rake tasks asks a bunch of questions, which are answered from the point of view of the staging server.

<code><pre>
rake build:installer:new_release
cap staging installer:copy_config
cap staging installer:create
</pre></code>

After running <code>rake build:installer:new_release</code> we end up with the following local installer file:
<code><pre>
shortname: RitesStaging
version: "200912.00"
jnlp_config: http://rites-investigations.staging.concord.org/investigations/545.jnlp
<code><pre>

this file gets pushed up to staging. with <code>cap staging installer:copy_config</code> we only have to do that the first time we create an
installer on staging. We could just as easily edit config/installer.yml.

The <code>cap staging installer:create</code> handles incrementing the version number, and pushing the new config files and installers onto staging.

h4. creating a fresh installer for a host that has had installers before:

<code><pre>
cap staging installer:create
</pre></code>

not much to do.

h2. Authentication, Sessions, and Cookies

h3. RESTful Authentication

RESTful Authentication is already setup. The routes are setup, along with the mailers and observers.
Forgotten password comes setup, so you don't have to mess around setting it up with every project.

The AASM plugin comes pre-installed. RESTful Authentication is also setup to use user activation.

h2. Uses the Database for Sessions

Bort is setup to use the database to store sessions by default. 

h3. User Roles

Bort, as of 0.3, has Open ID integrated with RESTful Authentication. Rejoice!

_However I've (stepheneb) removed this to make debugging the authentication simpler and it 
seems as though open-id is not becoming widespread._

h3. Will Paginate

We use will_paginate in pretty much every project we use.

h3. Exception Notifier

You don't want your applications to crash and burn so Exception Notifier is already installed to let 
you know when everything goes to shit.

config/initializers/exception_notifier.rb does the setup. Currently it reads 
"admin_email" from config/settings.yml and use it as the destination address.
The setup can be modified to include multiple email addresses.
See the homepage readme of exception notifier.

h4. Bug

It seems rails 2.3.3 and 2.3.4 fails to deliver emails when someone passes
multiple destination addresses as an array, which exception notifier does.
config/initializers/fix_mailer_on_rails_2.3.4.rb fixes the problem.

The code is borrowed from "Dmitry Polushkin":https://rails.lighthouseapp.com/projects/8994/tickets/2340-action-mailer-cant-deliver-mail-via-smtp-on-ruby-191

h2. Databases

If you are using mysql 5.5 or later you'll need the mysql2 gem.  This will be enabled by bundlers Gemfile if you define the environment variable:
RB_MYSQL2=true

On OS X the mysql2 gem usually can't find the mysql client library that it needs to run.  The command below fixes that.  It assumes your mysql is installed in the default basedir of /usr/local/mysql/lib.  And it assumes you are using bundler.
<code><pre>
install_name_tool -change libmysqlclient.16.dylib /usr/local/mysql/lib/libmysqlclient.16.dylib `bundle show mysql2`/lib/mysql2/mysql2.bundle
</code></pre>

h2. CSS

h3. Asset Packager

Portal authoring and portal site uses: "Asset Packager docs":http://synthesis.sbecker.net/pages/asset_packager

cap deploy will trigger the asset_packager to run.
you can also run locally by hand: rake asset:packager:build_all

Assets are configured in config/asset_packages.yml

Packages up your css/javascript so you're not sending 143 files down to the user at the same time. Reduces
load times and saves you bandwidth.

h2. Routing

h2. Application Settings



h2. Settings YAML

There is a settings.yml file that contains site-wide stuff. The site name, url and admin email are all used
in the RESTful Auth mailers, so you don't need to worry about editing them.

h3. Database YAML


h2. Technical debt.

Here is a brief list of things which need to be looked into:

* the embeddables should be dryed up with some mixin / super class.
* not all embeddables are using send_update_events, which is causing stale pages.
* ocassionally browser rendering gets wonky and raw html and or javascript get displayed in the page.
* transition to unobtrusive JS.
* send_update_events _might_ not do what we want it to do, tests should be written for it.


h2. Misc 

* password and password_confirmation are set up to be filtered
* there is a default application layout file
* a page title helper has been added
* index.html is already deleted
* rails.png is already deleted
* a few changes have been made to the default views
* a default css file with blank selectors for common rails elements

h2. Credits

Bort put together by people at "Fudge":http://www.fudgestudios.com/ 

!http://clients.fudgestudios.com/chester.jpg!

h2. Copy & Paste Guide:

<pre><code>
git clone git@github.com:concord-consortium/rigse.git ./xproject
cd xproject
echo 'rvm use 1.8.7@xproject-portal --create' > .rvmrc;
cd ..
cd xproject
gem install bundler
bundle install
ruby config/setup.rb -n "Cross Project Portal" -D xproject -u <dbuser> -p <password> -t xproject --states none -y -q -f
RAILS_ENV=production rake db:create:all
RAILS_ENV=production rake db:migrate:reset
RAILS_ENV=production rake app:setup:new_app
rake db:test:prepare

rake db:dump
ruby script/server -e production
</code></pre>
