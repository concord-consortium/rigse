- if data_collector.show_tare
  - content_for(ot_dom_id_for(data_collector, :element)) do
    %object{ :refid => ot_refid_for(data_collector) }/
    %br/
    %object{ :refid => ot_refid_for(data_collector, :zero_button) }/

  %OTButton{ :text => "Zero #{data_collector.y_axis_label}", :local_id => ot_local_id_for(data_collector, :zero_button),
       :action => ot_refid_for(data_collector, :zero_action)}/

- if data_collector.is_digital_display
  %OTDigitalDisplay{ :local_id                   => ot_local_id_for(data_collector),
                     :name                       => h(data_collector.name),
                     :fontSize                   => data_collector.dd_font_size}
    %dataProducer
      = render :partial => "embeddable/data_collectors/data_producer", :locals => { :data_collector => data_collector }
    %dataStore
      = generate_otml_datastore(data_collector)
- else
  %OTDataCollector{ :local_id                   => ot_local_id_for(data_collector),
                    :name                       => h(data_collector.name),
                    :title                      => data_collector.title,
                    :autoScaleEnabled           => data_collector.autoscale_enabled.to_s,
                    :showControlBar             => (!data_collector.static).to_s,
                    :useDefaultToolBar          => "false",
                    :displayButtons             => data_collector.ot_button_str,
                    :multipleGraphableEnabled   => data_collector.multiple_graphable_enabled.to_s }
    - case data_collector.graph_type
      - when 'Sensor'
        - if data_collector.multiple_graphable_enabled
          - # used as prototype when 'new' is clicked in multigraph
          %prototypeGraphables 
            %OTDataGraphable{ :local_id => ot_local_id_for(data_collector,  :source, :prototype_graphable),
              :connectPoints => data_collector.connect_points.to_s,
              :drawMarks => data_collector.draw_marks.to_s,
              :color => "0x00ff",
              :xColumn => "0", 
              :lineWidth => "2.0", 
              :visible => "true" }
              - unless data_collector.static
                %dataProducer
                  = render :partial => "embeddable/data_collectors/data_producer", :locals => { :data_collector => data_collector, :prototype => true }
        %source
          %OTDataGraphable{ :local_id => ot_local_id_for(data_collector,  :source, :data_graphable),
            :name => 'Sensor', :connectPoints => data_collector.connect_points.to_s,
            :drawMarks => data_collector.draw_marks.to_s, :color => "0x00ff",
            :xColumn => "0", :lineWidth => "2.0", :visible => "true" }
            - unless data_collector.static
              %dataProducer
                = render :partial => "embeddable/data_collectors/data_producer", :locals => { :data_collector => data_collector, :prototype => false}
            %dataStore
              = generate_otml_datastore(data_collector)
      - else
        - if data_collector.multiple_graphable_enabled && !data_collector.static
          - # used as prototype when 'new' is clicked in multigraph
          - # it isn't clear what the new button should do with a static graph
          %prototypeGraphables
            %OTDataGraphable{ :local_id => ot_local_id_for(data_collector, :source, :prototype_graphable),
              :controllable => (!data_collector.static).to_s,
              :connectPoints => data_collector.connect_points.to_s,
              :drawMarks => data_collector.draw_marks.to_s, :color => "0xff0000",
              :xColumn => "0", :lineWidth => "2.0", :visible => "true" }
        %source
          %OTDataGraphable{ :local_id => ot_local_id_for(data_collector, :source, :data_graphable),
            :controllable => (!data_collector.static).to_s,
            :name => h(truncate(data_collector.name, :length => 12)), :connectPoints => data_collector.connect_points.to_s,
            :drawMarks => data_collector.draw_marks.to_s, :color => "0xff0000",
            :xColumn => "0", :lineWidth => "2.0", :visible => "true" }
            %dataStore
              = generate_otml_datastore(data_collector)
        %dataSetFolder
          %OTFolderObject/
    - if prediction_graph = data_collector.prediction_graph_source
      %graphables
        %object{ :refid => ot_refid_for(prediction_graph, :source, :data_graphable) }/

    %xDataAxis
      %OTDataAxis{ :max => data_collector.x_axis_max, :min => data_collector.x_axis_min,
        :units => data_collector.x_axis_units, :label => data_collector.x_axis_label, :labelFormat => 'None' }/
    %yDataAxis
      %OTDataAxis{ :max => data_collector.y_axis_max, :min => data_collector.y_axis_min,
        :units => data_collector.y_axis_units, :label => data_collector.y_axis_label, :labelFormat => 'None' }/
