require 'fileutils'

class MavenJnlp::MavenJnlpServer < ActiveRecord::Base
  self.table_name = "maven_jnlp_maven_jnlp_servers"

  has_many :maven_jnlp_families, :class_name => "MavenJnlp::MavenJnlpFamily"

  acts_as_replicatable

  include Changeable

  self.extend SearchableModel

  @@searchable_attributes = %w{uuid name host path}

  class <<self
    def searchable_attributes
      @@searchable_attributes
    end

    def generate_names_for_maven_jnlp_servers
      maven_jnlp_servers = APP_CONFIG[:maven_jnlp_servers]
      maven_jnlp_servers.each do |server|
        attrs = { :host => server[:host], :path => server[:path] }
        if mj_server = MavenJnlp::MavenJnlpServer.find(:first, :conditions => attrs)
          unless mj_server.name
            puts "MavenJnlpServer: name: #{server[:name]} => #{attrs.inspect}"
            mj_server.name = server[:name]
            mj_server.save!
          end
        end
      end
    end

    def jnlp_object_cache_dir
      File.join(::Rails.root.to_s, 'config', 'jnlp_objects')
    end

    def delete_all_cached_maven_jnlp_resources
      MavenJnlp::MavenJnlpServer.delete_all_cached_maven_jnlp_objects
      MavenJnlp::VersionedJnlp.delete_all_cached_jnlp_objects
    end

    def delete_all_cached_maven_jnlp_objects
      files = Dir["#{MavenJnlp::MavenJnlpServer.jnlp_object_cache_dir}/**/#{maven_jnlp_object_name}*"]
      FileUtils.rm(files, :force => true)
    end

    def maven_jnlp_object_name
      'maven_jnlp_server_object'
    end

  end

  # ================================================================
  #
  # Managing the actual maven_jnlp_server object created by the Jnlp gem
  # This object is cached in a YAML format in the jnlp_objects dir
  #
  #    MavenJnlp::MavenJnlpServe#maven_jnlp_server_object
  #
  # Will return the real object (loading or updating if necessary).
  #
  def maven_jnlp_server_object
    @maven_jnlp_server_object || load_maven_jnlp_server_object
  end

  # if an argument error is generated by the yaml load of the cached
  # maven_jnlp_server_object then delete the cached yaml object and retry
  def load_maven_jnlp_server_object
    @first_parse = true
    begin
      if File.exists?(maven_jnlp_server_object_path)
        @maven_jnlp_server_object = YAML.load(File.read(maven_jnlp_server_object_path))
      else
        update_maven_jnlp_server_object
      end
    rescue ArgumentError
      if @first_parse
        @first_parse = false
        File.delete(maven_jnlp_server_object_path)
        retry
      end
      raise
    end
  end

  # example: <::Rails.root.to_s>/config/jnlp_objects/concord/maven_jnlp_server_object_1.yml
  def maven_jnlp_server_object_path
    "#{self.maven_jnlp_server_object_path_prefix}.yml"
  end

  def update_maven_jnlp_server_object
    server, family, version = JnlpAdaptor.default_jnlp_info
    # TODO
    # Portals need a way of getting more of the jnlp versions ... for now get all versions 
    # ... later perhaps expand use of settings or portal params to specify sets of versions
    # this used to just load the specific jnlp version and the snapshot version
    # versions = [version, 'snapshot']
    # versions.uniq!
    @maven_jnlp_server_object = Jnlp::MavenJnlp.new(host, path,
    # { :families => { family => { :versions => versions }, 'gui-testing' => { :versions => ['snapshot'] } } })
    { :families => { family => {}, 'gui-testing' => { :versions => ['snapshot'] } } })
    save_maven_jnlp_server_object
  end

  def save_maven_jnlp_server_object
    FileUtils.mkdir_p(maven_jnlp_server_object_dir_path)
    File.open(maven_jnlp_server_object_path, 'w') do |f|
      f.write YAML.dump(@maven_jnlp_server_object)
    end
    @maven_jnlp_server_object
  end

  def delete_maven_jnlp_server_object
    FileUtils.rm(maven_jnlp_server_object_path, :force => true)
  end

  # example: <::Rails.root.to_s>/config/jnlp_objects/concord/maven_jnlp_server_object
  def  maven_jnlp_server_object_path_prefix
    File.join(maven_jnlp_server_object_dir_path, MavenJnlp::MavenJnlpServer.maven_jnlp_object_name)
  end

  # example: <::Rails.root.to_s>/config/jnlp_objects/concord
  def maven_jnlp_server_object_dir_path
    File.join(MavenJnlp::MavenJnlpServer.jnlp_object_cache_dir, self.name)
  end

  # ================================================================
  #
  # Creates the MavenJnlp Families (and all related resources such as VersionedJnlpUrls,
  # VersionedJnlps, Jars, NativeLibraries, Icons) listed in the application settings
  #
  def create_maven_jnlp_families(verbose=false)
    @mj_families = APP_CONFIG[:maven_jnlp_families]
    @mj_families << "gui-testing"
    # remove duplicated 'gui-testing' in case settings.yml already specified importing all jnlp families
    @mj_families.uniq!
    unless @mj_families.empty?
      # Scan through all the real maven jnlp familiy objects and create
      # Rails model instances for the families specified in the app settings
      maven_jnlp_server_object.maven_jnlp_families.each do |mjf_object|
        if self.maven_jnlp_families.find_by_url(mjf_object.url)
          if verbose
            puts "\nmaven_jnlp_family: #{mjf_object.url} "
            puts "already exists "
          end
        elsif @mj_families.include?(mjf_object.name)
          mjf = self.maven_jnlp_families.build(
            :name             => mjf_object.name,
            :url              => mjf_object.url,
            :snapshot_version => mjf_object.snapshot_version)
          mjf.save!
          if verbose
            puts "\nmaven_jnlp_family: #{mjf_object.url} "
            puts "current snapshot version: #{mjf_object.snapshot_version} "
            puts "generating #{mjf_object.versions.length} versioned_jnlp resources:"
            puts "\n\n"
          end
          mjf.create_versioned_jnlp_urls(mjf_object)
          mjf.snapshot_jnlp_url.versioned_jnlp
        else
          puts "skipping maven_jnlp_family: #{mjf_object.url} " if verbose
        end
      end
    end
  end
end
