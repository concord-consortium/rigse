-if @import_type == Import::Import::IMPORT_TYPE_SCHOOL_DISTRICT
  -heading = "Import Schools and Districts"
  -url_path = import_school_district_json_import_imports_path
  -user_import = false
-elsif @import_type == Import::Import::IMPORT_TYPE_USER
  -heading = "Import Users"
  -url_path = import_user_json_import_imports_path
  -user_import = true
-else
  -heading = "Import Activities(Batch)"
  -url_path = batch_import_import_imports_path
  -user_import = false
%h1
  =heading
.progress-wrap{:class =>  @imports_progress.length == 0 ? "finished" : ""}
  .progress-bar
    .progress-status
  %div.progress-percentage
    Import in progress:
    %span
  .progress-complete 
    .flash.notice
      Import Completed
  - if @import_type == Import::Import::IMPORT_TYPE_BATCH_ACTIVITY
    .batch-import
      .total-imports
      %span.successful
      %span.failed
  .progress-complete  
    %p.download-failed
      Click 
      =link_to "here", failed_batch_import_import_imports_url
      to download the list of failed imports.
    .new-import
      %p
        Click 
        =link_to "here", url_for 
        to start a new Import.
        -if user_import
          %p
            Click 
            =link_to "here", download_import_imports_url
            to download the list of duplicate users.
- if @imports_progress.length == 0
  .import
    Choose a JSON file to import
    = form_tag url_path , :method => :post, :remote => true, :multipart => true, :id => "import" do |f|
      .info
        %table
          %tr
            %td 
              =file_field 'import', 'import', accept: 'application/json', class: 'import_file'
      %input{:class => "import-submit", :type => "button", :id => "import-post-json", :value => "Import"} 

    %script{:id => 'template-upload',:type => 'text/x-tmpl'}
    .upload-wrap{:id => 'upload_div'}
      .upload-progress.upload
        .bar
      %div.upload-progress-message.upload
        Please wait while your file is being uploaded.

:sass
  #import
    padding: 0
  .progress-wrap
    .progress-bar
      width: 400px
      border: 1px solid #0B6B08
      padding: 1px
      border-radius: 3px
      .progress-status
        background-color: #EFA967
        width: 0%
        height: 15px
        border-radius: 3px
    .progress-complete
      display: none
      margin-bottom: 30px
      .new-import
        margin-top: 10px
    .batch-import
      font-weight: bold
      .successful
        color: green
        margin-right: 20px
      .failed
        color: red
    .progress-percentage
      span
        font-weight: bold
  .finished
    display: none

  .upload-wrap
    margin-top: 10px
    .upload-progress
      width: 400px
      border: 1px solid #0B6B08
      padding: 1px
      border-radius: 3px
      background-color: #FFCC99
    .upload
      display: none
      .bar
        background-color: #E78014
        width: 0%
        height: 10px
        border-radius: 3px

:javascript

  jQuery(function(){

    var targetUrl = window.location.pathname,
        $progressWrap = jQuery(".progress-wrap"),
        $import = jQuery(".import"),
        timer;

    function hideProgress($progressWrap){
      if(!$progressWrap.hasClass("finished")){
        $progressWrap.find(".progress-bar").hide();
        $progressWrap.find(".progress-percentage").hide();
        $progressWrap.find(".progress-complete").show();
      }
      clearInterval(timer);
    }

    function updateProgress(progressData){
      if(progressData["progress"].length == 0){
        getSuccess();
        hideProgress($progressWrap);
        return;
      }
      var data = progressData["progress"][0],
          progress = data["progress"],
          total = data["total"],
          percent = Math.round((progress / total) * 100);
      if (progress == -1){
        if(!alert('Error occured while importing')){window.location.reload();}
      }
      if(progress){
        if(progress < total){
          $progressWrap.removeClass("finished");          
          $progressWrap.find(".progress-status").width(percent+"%");
          $progressWrap.find(".progress-percentage span").text(percent+"%");
          if($progressWrap.find(".batch-import").length != 0){
            updateSuccess(total,progress,data["success"]);
          }
        } else if(progress == total){
          getSuccess();
          hideProgress($progressWrap);
        }
      }
    }

    function displaySuccess(data){
      updateSuccess(data["total_imports"],data["total_imports"],data["success"])
      if(data["success"] == data["total_imports"]){
        $progressWrap.find(".download-failed").hide();
      }
    }

    function updateSuccess(total,progress,success){
      var failed = (progress - success) < 0 ? 0 : (progress - success);
      $progressWrap.find(".batch-import").show();
      $progressWrap.find(".total-imports").html("Total imports : " + total);
      $progressWrap.find(".successful").html("Success : " + success);
      $progressWrap.find(".failed").html("Failed : " + failed);
    }

    function getSuccess(){
      if($progressWrap.find(".batch-import").length != 0 && !$progressWrap.hasClass("finished")){
        jQuery.ajax({
         url:"/import/imports/batch_import_data",
          success: function(successData) {
            displaySuccess(successData.data[0]);
          },
          error: function(transport) {}
        });
      }
    }

    function poll(){
      timer = setInterval(function(){
        jQuery.ajax({
         url:targetUrl,
          success: function(progressData) {
            console.log(progressData);
            updateProgress(progressData)
          },
          error: function(transport) {}
        });
      },15000);
    }

    jQuery("#import").fileupload({
      replaceFileInput: false,
      autoUpload: false,
      add: function(e, data) {
        type = /.json$/
        if(!type.test(data.files[0].name)){
          alert(data.files[0].name  + " is not a json file.");
          this.reset();
        }
        data.context = jQuery(tmpl("upload_div", data.files[0]));
        jQuery(".import-submit").unbind('click').on('click', function(e){
          e.preventDefault();
          data.submit();
        });
      },
      progress: function(e, data) {
        var progress;
        if (data) {
          progress = parseInt(data.loaded / data.total * 100, 10);
          jQuery('.upload').show();
          return jQuery('.bar').css('width', progress + '%');
        }
      },
      done:function(e, data){
        $progressWrap.removeClass("finished");
        $import.hide();
        updateProgress(data.response().result);
        poll();
      },
      error:function(e, data){
        if(!alert('Invalid JSON')){window.location.reload();}
      }
    });
    poll();
  });


