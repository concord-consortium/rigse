# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AdminProject {
  id: ID!
  name: String
  landingPageSlug: String
  landingPageContent: String
  projectCardImageUrl: String
  projectCardDescription: String
  public: Boolean
  users: [User]
}

type adminProjectListMeta {
  count: Float
}

type AdminProjectUser {
  id: ID
  projectId: ID
  project: AdminProject
  userId: ID
  isAdmin: Boolean
  isResearcher: Boolean
}

input AdminProjectUserFilter {
  userId: ID
}

type adminProjectUserListMeta {
  count: Float
}

type Mutation {
  deleteAdminProject(id: String): Boolean
  createAdminProject(projectCardImageUrl: String, projectCardDescription: String, public: Boolean, landingPageSlug: String, name: String): AdminProject
  updateAdminProject(landingPageContent: String, projectCardImageUrl: String, projectCardDescription: String, public: Boolean, landingPageSlug: String, name: String, id: String): AdminProject
  updateAdminProjectUser(id: ID, isAdmin: Boolean = false, isResearcher: Boolean = false): AdminProjectUser
  createAdminProjectUser(userId: ID, projectId: ID, isAdmin: Boolean = false, isResearcher: Boolean = false): AdminProjectUser
  deleteAdminProjectUser(id: String): AdminProjectUser
  deleteUser(id: String): Boolean
  createUser(firstName: String, lastName: String, email: String, login: String, projectsIds: [ID]): User
  updateUser(firstName: String, lastName: String, email: String, login: String, projectsIds: [ID], id: Float): User
}

type Query {
  allAdminProjects: [AdminProject]
  _allAdminProjectsMeta: adminProjectListMeta
  AdminProject(id: String): AdminProject
  allAdminProjectUsers(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AdminProjectUserFilter): [AdminProjectUser]
  _allAdminProjectUsersMeta(page: Int, perPage: Int, sortField: String, sortOrder: String, filter: AdminProjectUserFilter): adminProjectUserListMeta
  AdminProjectUser(id: String): AdminProjectUser
  allUsers(filter: UserFilter, page: Float = 0, perPage: Float = 10, sortField: String = "id", sortOrder: String = "ASC"): [User]
  _allUsersMeta(filter: UserFilter, page: Float = 0, perPage: Float = 10, sortField: String = "id", sortOrder: String = "ASC"): userListMeta
  User(id: String): User
}

type User {
  id: ID!
  login: String
  projects: [AdminProject]
  firstName: String
  lastName: String
  email: String
  encryptedPassword: String
}

input UserFilter {
  id: ID
  email: String
  lastName: String
  firstName: String
}

type userListMeta {
  count: Float
}
