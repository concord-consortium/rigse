# This configuration adds the following overlays:
#
# docker-gh-codespaces: GitHub Codespaces settings (eg port 3000 exposed)
#
# docker-compose-publish-capybara-port.yml: expose the capybara port so a chrome driver
#   running on the host machine can talk to the capaybara server and you can see the UI
#   while the test are running.
COMPOSE_FILE=docker-compose.yml:docker/dev/docker-compose-gh-codespaces.yml:docker/dev/docker-compose-publish-capybara-port.yml:docker/dev/docker-compose-lara-proxy.yml

# Run `echo ${CODESPACE_NAME}` in LARA GitHub Codespace container and copy returned value here. It'll be used
# to automatically set LARA_HOST, LARA_DOMAIN, and LARA_TOOL_ID variables.
LARA_CODESPACE_NAME=

LARA_HOST=${LARA_CODESPACE_NAME}-3000.preview.app.github.dev
LARA_DOMAIN=${LARA_CODESPACE_NAME}-3000.preview.app.github.dev

# CODESPACE_NAME is available in GitHub Codespace container.
PORTAL_HOST=${CODESPACE_NAME}-3000.preview.app.github.dev
PORTAL_PROTOCOL=https

# Run the portal in researcher report mode this is used by the researcher portal
# RESEARCHER_REPORT_ONLY=true
MYSQL_ROOT_PASSWORD=xyzzy

# Sets the secret used to generate the portal JWT tokens in lib/signed_jwt.rb
JWT_HMAC_SECRET=XXXX

# Configure rails logging levels:
#     DEBUG | INFO | WARN | ERROR | FATAL | UNKNOWN
TEST_LOG_LEVEL=WARN
DEV_LOG_LEVEL=DEBUG
