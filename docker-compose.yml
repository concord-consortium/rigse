# This file is meant for development, in production we use a slightly different
# configuration
version: '3'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile-dev
    command: docker/dev/run.sh
    environment:
      DB_HOST: mysql
      DB_USER: root
      DB_PASSWORD: xyzzy

      #
      # Solr hosts and ports
      #
      SOLR_HOST: solr
      SOLR_PORT: 8983
      TEST_SOLR_HOST: solr-test
      TEST_SOLR_PORT: 8981

      PORTAL_FEATURES:

      #
      # OAuth keys
      #
      SCHOOLOGY_CONSUMER_KEY:
      SCHOOLOGY_CONSUMER_SECRET:
      GOOGLE_CLIENT_KEY:
      GOOGLE_CLIENT_SECRET:

      SITE_URL:
      RESEARCHER_REPORT_ONLY:

      #
      # ASN API key
      #
      ASN_API_KEY:

      #
      # portal-pages URLs
      #
      PORTAL_PAGES_LIBRARY_URL: "${PORTAL_PAGES_LIBRARY_URL:-https://portal-pages.concord.org/library}"
      EXTERNAL_CSS_URL:

      #
      # Google analytics property ID
      #
      GOOGLE_ANALYTICS_ACCOUNT:

      #
      # Google Optimizer property ID
      #
      GOOGLE_OPTIMIZER_ACCOUNT:

      #
      # MailChimp API information
      ENEWS_API_KEY:
      ENEWS_API_URI:
      ENEWS_API_LISTID:

      #
      # OG tag default values
      #
      OG_TITLE:
      OG_DESCRIPTION:
      OG_IMAGE_URL:

      #
      # Set to true to enable dynamic robots.txt
      #
      DYNAMIC_ROBOTS_TXT:

      #
      # When PORTAL_FEATURES has "allow_cors" set this to a list of
      # origins, or * for all.
      #
      CORS_ORIGINS:

      #
      # Set the portal version displayed in the UI footer.
      #
      CC_PORTAL_VERSION:

      #
      # Set rollbar access tokens
      #
      ROLLBAR_ACCESS_TOKEN:
      ROLLBAR_CLIENT_ACCESS_TOKEN:

      #
      # Set JWT HMAC secret
      #
      JWT_HMAC_SECRET:

      #
      # override this to specify a different elastic search server
      #
      ELASTICSEARCH_URL: "${ELASTICSEARCH_URL:-http://elasticsearch:9200}"
      #
      # used to pass context to selenium
      #
      DOCKER: 'true'

      #
      # Enables logging to file in dev and test environments. Disabled by default.
      #
      LOG_TO_FILE:
    # open standard in and turn on tty so we can attach to the container and debug it
    stdin_open: true
    tty: true

    # no ports are published, see below for details
    volumes:
      - .:/rigse
      - bundle:/bundle
    networks:
      # the portal network allows external connections
      portal:
        aliases:
          - portal
      # app service needs to be on default network too so it can connect to mysql and solr
      default:
    depends_on:
      - mysql
  solr:
    image: concordconsortium/docker-solr-portal
    # no ports are published, see below for details
    volumes:
      - .:/rigse
    command: /bin/bash ./start-solr.sh
  mysql:
    image: mysql:5.6
    environment:
      MYSQL_ROOT_PASSWORD: xyzzy
    command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci
    volumes:
      # use a named volume here so the database is preserved after a down and up
      - mysql:/var/lib/mysql
  solr-test:
    image: concordconsortium/docker-solr-portal
    environment:
      TEST_SOLR_PORT: 8981
    #
    # Mount the portal source in the container under /rigse
    #
    volumes:
      - .:/rigse
    #
    # Invoke the docker/dev/start-solr-test.sh script allowing us
    # to specify a port and other parameters.
    #
    command: ["/bin/bash", "-c", "/rigse/docker/dev/start-solr-test.sh -f -p $${TEST_SOLR_PORT}" ]
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.1.1
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xmx256m -Xms256m
    ports:
      # this should be left unspecified so the random ports approach can be used
      - 9200:9200
      - 9300:9300
    networks:
      - portal
      - default
  logstash:
    build:
      context: docker/logstash
      dockerfile: Dockerfile
    environment:
      DB_HOST: mysql
      DB_NAME: portal_development
      DB_USER: root
      DB_PASSWORD: xyzzy
      ES_TYPE: local
      ES_HOST: elasticsearch
    volumes:
      # override logstash output to use local elastic search
      - ./docker/logstash/logstash-output-dev.conf:/usr/share/logstash/pipeline/logstash-output.conf
  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.1.1
volumes:
  bundle:
  mysql:
networks:
  # create a portal network so other services such as LARA can be part of this network
  # and connect with the web app.
  portal:

# In this file the web app and solr ports are not published. However, if you run
# `docker-compose up` (without customizing your environment) the ports will be published
# to 3000 and 8983.  This is because the docker-compose.override.yml file will be loaded
# automatically by docker-compose.
# You will likely want to modify how the ports are published, so they don't conflict.
# Take a look at the this overlay for more information:
#   docker/dev/docker-compose-random-ports.yml
